// Global variables
ArrayList<Particle> allParticles = new ArrayList<Particle>();
float pulsateMult = 0;
PVector explosionPos;
PVector gravity = new PVector(0, 0.1, 0);
float angleSteps = 2.5;


class Particle {
  PVector pos = new PVector(0, 0, 0);
  PVector vel = new PVector(0, 0, 0);
  int zDepth = 0;
  float rotation = 45;
  float spinRate = 0;
  color pixelColor;
  float explosionMult = 0;
  boolean active = false;

  Particle(float x, float y, float z) {
    this.pos.set(x, y, z);
    this.explosionMult = random(0.5, 8.0);
    this.spinRate = random(-0.25, 0.25);
  }

  void draw() {
    strokeWeight(2);
    stroke(this.pixelColor);
    
    pushMatrix();
    translate(this.pos.x, this.pos.y, this.pos.z);
    rotateZ(this.rotation);
    if (this.active) {
      rotateX(frameCount*this.spinRate);
    }
    rect(0, 0, 3, 3);
    popMatrix();
    
    if (this.active) {
      this.rotation += this.spinRate;
    }
  }
}


// Code for getting heart shape by Ilyas Shafigin
void createHeart(int heartSize, int depthAmount, int spacing) {
  frameCount = 0;
  allParticles.clear();

  for (int z = 0; z < depthAmount; z++) {
    for (float angle = -90; angle < 90; angle += angleSteps) {
      float t = angle*2.0;
      float x = 16*pow(sin(radians(t)), 3);
      float y = -13*cos(radians(t)) + 5*cos(radians(2*t)) + 2*cos(radians(3*t)) + cos(radians(4*t));

      Particle particle = new Particle(x*heartSize+width/2, y*heartSize+height/2, z*spacing);
      particle.pixelColor = color(30+z*20, 0, z*5);
      particle.zDepth = z+1;
      allParticles.add(particle);
    }
  }
}
